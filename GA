import random
import prettytable

# Constants
POPULATION_SIZE = 10
NUM_OF_ELITE_SCHEDULES = 1
TOURNAMENT_SELECTION_SIZE = 5
MUTATION_RATE = 0.1

# Class Definitions

class Data:
    ROOMS = [["R1", 75], ["R2", 75], ["R3", 75], ["L1", 75], ["L2", 75]]

    MEETING_TIMES = [["MT1", "MWFS 10:00 - 11:00"],
                     ["MT2", "TTHS 11:00 - 12:00"],
                     ["MT3", "MWFS 12:00 - 01:00"],
                     ["MT4", "TTHS 01:00 - 02:00"],
                     ["MT5", "MWFS 02:00 - 03:00"],
                     ["MT6", "TTHS 03:00 - 04:00"]]

    INSTRUCTORS = [["I1", "Dr.K.S.Oza"],
                   ["I2", "Dr.U.R.Pol"],
                   ["I3", "Dr.S.K.Kharade"],
                   ["I4", "Dr.K.G.Kharade"],
                   ["I5", "Dr.S.V.Katkar"],
                   ["I6", "Dr.V.S.Kumbhar"],
                   ["I7", "Mr.P.T.Goyal"],
                   ["I8", "Ms.A.B.Chougule"],
                   ["I9", "Dr.S.S.Gaikwad"],
                   ["I10", "Dr.S.S.Nirmale"],
                   ["I11", "Dr.R.R.Kuldeep"],
                   ["I12", "Mr.A.R.Swami"],
                   ["I13", "Mr.M.S.Sawant"],
                   ["I14", "Ms.P.R.Dharmoji"],
                   ["I15", "Mr.V.R.Suryawanshi"],
                   ["I16", "Dr.S.A.Shinde"]]

    def __init__(self):
        self._rooms = []
        self._meetingTimes = []
        self._instructors = []
        for i in range(0, len(self.ROOMS)):
            self._rooms.append(Room(self.ROOMS[i][0], self.ROOMS[i][1]))
        for i in range(0, len(self.MEETING_TIMES)):
            self._meetingTimes.append(MeetingTime(self.MEETING_TIMES[i][0], self.MEETING_TIMES[i][1]))
        for i in range(0, len(self.INSTRUCTORS)):
            self._instructors.append(Instructor(self.INSTRUCTORS[i][0], self.INSTRUCTORS[i][1]))
        self._courses = [
            Course("MCA1", "101", [self._instructors[8], self._instructors[6], self._instructors[4],self._instructors[7],self._instructors[5]], 75),
            Course("MCA1", "102", [self._instructors[8], self._instructors[6], self._instructors[4],self._instructors[7],self._instructors[5]], 75),
            Course("MCA1", "103", [self._instructors[8], self._instructors[6], self._instructors[4],self._instructors[7],self._instructors[5]], 75),
            Course("MCA1", "104", [self._instructors[8], self._instructors[6], self._instructors[4],self._instructors[7],self._instructors[5]], 75),
            Course("MCA1", "105", [self._instructors[8], self._instructors[6], self._instructors[4],self._instructors[7],self._instructors[5]], 75),
            Course("MCA2", "201", [self._instructors[1], self._instructors[0], self._instructors[7],self._instructors[4]], 75),
            Course("MCA2", "202", [self._instructors[1], self._instructors[0], self._instructors[7],self._instructors[4]], 75),
            Course("MCA2", "203", [self._instructors[1], self._instructors[0], self._instructors[7],self._instructors[4]], 75),
            Course("MCA2", "204", [self._instructors[1], self._instructors[0], self._instructors[7],self._instructors[4]], 75),
            Course("MCA2", "205", [self._instructors[1], self._instructors[0], self._instructors[7],self._instructors[4]], 75),
            Course("MS1", "301", [self._instructors[4], self._instructors[8], self._instructors[3],self._instructors[5]], 75),
            Course("MS1", "302", [self._instructors[4], self._instructors[8], self._instructors[3],self._instructors[5]], 75),
            Course("MS1", "303", [self._instructors[4], self._instructors[8], self._instructors[3],self._instructors[5]], 75),
            Course("MS1", "304", [self._instructors[4], self._instructors[8], self._instructors[3],self._instructors[5]], 75),
            Course("MS1", "305", [self._instructors[4], self._instructors[8], self._instructors[3],self._instructors[5]], 75),
            Course("MS2", "401", [self._instructors[0], self._instructors[3], self._instructors[1],self._instructors[2]], 75),
            Course("MS2", "402", [self._instructors[0], self._instructors[3], self._instructors[1],self._instructors[2]], 75),
            Course("MS2", "403", [self._instructors[0], self._instructors[3], self._instructors[1],self._instructors[2]], 75),
            Course("MS2", "404", [self._instructors[0], self._instructors[3], self._instructors[1],self._instructors[2]], 75),
            Course("MS2", "405", [self._instructors[0], self._instructors[3], self._instructors[1],self._instructors[2]], 75),
            Course("BCA1", "501", [self._instructors[3], self._instructors[9], self._instructors[6],self._instructors[11],self._instructors[4],self._instructors[10],self._instructors[13],self._instructors[12],self._instructors[14]], 75),
            Course("BCA1", "502", [self._instructors[3], self._instructors[9], self._instructors[6],self._instructors[11],self._instructors[4],self._instructors[10],self._instructors[13],self._instructors[12],self._instructors[14]], 75),
            Course("BCA1", "503", [self._instructors[3], self._instructors[9], self._instructors[6],self._instructors[11],self._instructors[4],self._instructors[10],self._instructors[13],self._instructors[12],self._instructors[14]], 75),
            Course("BCA1", "504", [self._instructors[3], self._instructors[9], self._instructors[6],self._instructors[11],self._instructors[4],self._instructors[10],self._instructors[13],self._instructors[12],self._instructors[14]], 75),
            Course("BCA1", "505", [self._instructors[3], self._instructors[9], self._instructors[6],self._instructors[11],self._instructors[4],self._instructors[10],self._instructors[13],self._instructors[12],self._instructors[14]], 75),
            Course("BCA2", "601", [self._instructors[6], self._instructors[15], self._instructors[3],self._instructors[13],], 75),
            Course("BCA2", "602", [self._instructors[6], self._instructors[15], self._instructors[3],self._instructors[13],], 75),
            Course("BCA2", "603", [self._instructors[6], self._instructors[15], self._instructors[3],self._instructors[13],], 75),
            Course("BCA2", "604", [self._instructors[6], self._instructors[15], self._instructors[3],self._instructors[13],], 75),
            Course("BCA2", "605", [self._instructors[6], self._instructors[15], self._instructors[3],self._instructors[13],], 75),
        ]

        dept1 = Department("MCA-1", [self._courses[0], self._courses[1],self._courses[2],self._courses[3],self._courses[4]])
        dept2 = Department("MCA-2", [self._courses[5], self._courses[6],self._courses[7],self._courses[8], self._courses[9]])
        dept3 = Department("MSc-1", [self._courses[10], self._courses[11], self._courses[12],self._courses[13], self._courses[14]])
        dept4 = Department("MSc-2", [self._courses[15], self._courses[16], self._courses[17],self._courses[18], self._courses[19]])
        dept5 = Department("BCA-1", [self._courses[20], self._courses[21], self._courses[22],self._courses[23], self._courses[24]])
        dept6 = Department("BCA-2", [self._courses[25], self._courses[26], self._courses[27],self._courses[28], self._courses[29]])

        self._depts = [dept1, dept2, dept3, dept4, dept5, dept6]
        self._numberOfClasses = 0
        for i in range(0, len(self._depts)):
            self._numberOfClasses += len(self._depts[i].get_courses())

    def get_rooms(self):
        return self._rooms

    def get_instructors(self):
        return self._instructors

    def get_courses(self):
        return self._courses

    def get_depts(self):
        return self._depts

    def get_meetingTimes(self):
        return self._meetingTimes

    def get_numberOfClasses(self):
        return self._numberOfClasses

class Schedule:
    def __init__(self, data):
        self._data = data
        self._classes = []
        self._numbOfConflicts = 0
        self._fitness = -1
        self._classNumb = 0
        self._isFitnessChanged = True

    def get_classes(self):
        self._isFitnessChanged = True
        return self._classes

    def get_numbOfConflicts(self):
        return self._numbOfConflicts

    def get_fitness(self):
        if self._isFitnessChanged:
            self._fitness = self.calculate_fitness()
            self._isFitnessChanged = False
        return self._fitness

    def initialize(self):
        depts = self._data.get_depts()
        for i in range(0, len(depts)):
            courses = depts[i].get_courses()
            for j in range(0, len(courses)):
                newClass = Class(self._classNumb, depts[i], courses[j])
                self._classNumb += 1
                newClass.set_meetingTime(random.choice(self._data.get_meetingTimes()))
                newClass.set_room(random.choice(self._data.get_rooms()))
                newClass.set_instructor(random.choice(courses[j].get_instructors()))
                self._classes.append(newClass)
        return self

    def calculate_fitness(self):
        self._numbOfConflicts = 0
        classes = self.get_classes()
        for i in range(0, len(classes)):
            if classes[i].get_room().get_seatingCapacity() < classes[i].get_course().get_maxNumbOfStudents():
                self._numbOfConflicts += 1
            for j in range(0, len(classes)):
                if j >= i:
                    if (classes[i].get_meetingTime() == classes[j].get_meetingTime() and
                            classes[i].get_id() != classes[j].get_id()):
                        if classes[i].get_room() == classes[j].get_room():
                            self._numbOfConflicts += 1
                        if classes[i].get_instructor() == classes[j].get_instructor():
                            self._numbOfConflicts += 1
        return 1 / (1.0 * self._numbOfConflicts + 1)

    def __str__(self):
        returnValue = ""
        for i in range(0, len(self._classes) - 1):
            returnValue += str(self._classes[i]) + ", "
        returnValue += str(self._classes[len(self._classes) - 1])
        return returnValue

class Population:
    def __init__(self, size, data):
        self._size = size
        self._data = data
        self._schedules = []
        for i in range(0, size):
            self._schedules.append(Schedule(data).initialize())

    def get_schedules(self):
        return self._schedules

class GeneticAlgorithm:
    def evolve(self, population):
        return self._mutate_population(self._crossover_population(population))

    def _crossover_population(self, pop):
        crossover_pop = Population(0, pop._data)
        for i in range(NUM_OF_ELITE_SCHEDULES):
            crossover_pop.get_schedules().append(pop.get_schedules()[i])
        i = NUM_OF_ELITE_SCHEDULES
        while i < POPULATION_SIZE:
            schedule1 = self._select_tournament_population(pop).get_schedules()[0]
            schedule2 = self._select_tournament_population(pop).get_schedules()[0]
            crossover_pop.get_schedules().append(self._crossover_schedule(schedule1, schedule2))
            i += 1
        return crossover_pop

    def _mutate_population(self, population):
        for i in range(NUM_OF_ELITE_SCHEDULES, POPULATION_SIZE):
            self._mutate_schedule(population.get_schedules()[i])
        return population

    def _crossover_schedule(self, schedule1, schedule2):
        crossover_schedule = Schedule(schedule1._data).initialize()
        for i in range(0, len(crossover_schedule.get_classes())):
            if random.random() > 0.5:
                crossover_schedule.get_classes()[i] = schedule1.get_classes()[i]
            else:
                crossover_schedule.get_classes()[i] = schedule2.get_classes()[i]
        return crossover_schedule

    def _mutate_schedule(self, mutate_schedule):
        schedule = Schedule(mutate_schedule._data).initialize()
        for i in range(0, len(mutate_schedule.get_classes())):
            if MUTATION_RATE > random.random():
                mutate_schedule.get_classes()[i] = schedule.get_classes()[i]
        return mutate_schedule

    def _select_tournament_population(self, pop):
        tournament_pop = Population(0, pop._data)
        i = 0
        while i < TOURNAMENT_SELECTION_SIZE:
            tournament_pop.get_schedules().append(pop.get_schedules()[random.randrange(0, POPULATION_SIZE)])
            i += 1
        tournament_pop.get_schedules().sort(key=lambda x: x.get_fitness(), reverse=True)
        return tournament_pop

class Course:
    def __init__(self, number, name, instructors, maxNumbOfStudents):
        self._number = number
        self._name = name
        self._maxNumbOfStudents = maxNumbOfStudents
        self._instructors = instructors

    def get_number(self):
        return self._number

    def get_name(self):
        return self._name

    def get_instructors(self):
        return self._instructors

    def get_maxNumbOfStudents(self):
        return self._maxNumbOfStudents

    def __str__(self):
        return self._name

class Instructor:
    def __init__(self, id, name):
        self._id = id
        self._name = name

    def get_id(self):
        return self._id

    def get_name(self):
        return self._name

    def __str__(self):
        return self._name

class Room:
    def __init__(self, number, seatingCapacity):
        self._number = number
        self._seatingCapacity = seatingCapacity

    def get_number(self):
        return self._number

    def get_seatingCapacity(self):
        return self._seatingCapacity

class MeetingTime:
    def __init__(self, id, time):
        self._id = id
        self._time = time

    def get_id(self):
        return self._id

    def get_time(self):
        return self._time

class Department:
    def __init__(self, name, courses):
        self._name = name
        self._courses = courses

    def get_name(self):
        return self._name

    def get_courses(self):
        return self._courses

class Class:
    def __init__(self, id, dept, course):
        self._id = id
        self._dept = dept
        self._course = course
        self._instructor = None
        self._meetingTime = None
        self._room = None

    def get_id(self):
        return self._id

    def get_dept(self):
        return self._dept

    def get_course(self):
        return self._course

    def get_instructor(self):
        return self._instructor

    def get_meetingTime(self):
        return self._meetingTime

    def get_room(self):
        return self._room

    def set_instructor(self, instructor):
        self._instructor = instructor

    def set_meetingTime(self, meetingTime):
        self._meetingTime = meetingTime

    def set_room(self, room):
        self._room = room

    def __str__(self):
        return str(self._dept.get_name()) + ", " + str(self._course.get_number()) + ", " + \
               str(self._room.get_number()) + ", " + str(self._instructor.get_id()) + ", " + str(self._meetingTime.get_id())

class DisplayMgr:
    def print_available_data(self, data):
        print("> All Available Data")
        self.print_dept(data)
        self.print_course(data)
        self.print_room(data)
        self.print_instructor(data)
        self.print_meeting_times(data)

    def print_dept(self, data):
        depts = data.get_depts()
        availableDeptsTable = prettytable.PrettyTable(['Dept', 'Courses'])
        for i in range(0, len(depts)):
            courses = depts[i].get_courses()
            tempStr = "["
            for j in range(0, len(courses) - 1):
                tempStr += courses[j].__str__() + ", "
            tempStr += courses[len(courses) - 1].__str__() + "]"
            availableDeptsTable.add_row([depts[i].get_name(), tempStr])
        print(availableDeptsTable)

    def print_course(self, data):
        courses = data.get_courses()
        availableCoursesTable = prettytable.PrettyTable(['ID', 'Course #', 'Max # of Students', 'Instructors'])
        for i in range(0, len(courses)):
            instructors = courses[i].get_instructors()
            tempStr = ""
            for j in range(0, len(instructors) - 1):
                tempStr += instructors[j].__str__() + ", "
            tempStr += instructors[len(instructors) - 1].__str__()
            availableCoursesTable.add_row([courses[i].get_number(), courses[i].get_name(),
                                           str(courses[i].get_maxNumbOfStudents()), tempStr])
        print(availableCoursesTable)

    def print_instructor(self, data):
        instructors = data.get_instructors()
        availableInstructorsTable = prettytable.PrettyTable(['ID', 'Instructor'])
        for i in range(0, len(instructors)):
            availableInstructorsTable.add_row([instructors[i].get_id(), instructors[i].get_name()])
        print(availableInstructorsTable)

    def print_room(self, data):
        rooms = data.get_rooms()
        availableRoomsTable = prettytable.PrettyTable(['Room #', 'Max Seating Capacity'])
        for i in range(0, len(rooms)):
            availableRoomsTable.add_row([str(rooms[i].get_number()), str(rooms[i].get_seatingCapacity())])
        print(availableRoomsTable)

    def print_meeting_times(self, data):
        meetingTimes = data.get_meetingTimes()
        availableMeetingTimeTable = prettytable.PrettyTable(['ID', 'Meeting Time'])
        for i in range(0, len(meetingTimes)):
            availableMeetingTimeTable.add_row([meetingTimes[i].get_id(), meetingTimes[i].get_time()])
        print(availableMeetingTimeTable)

    def print_generation(self, population):
        table = prettytable.PrettyTable(['Schedule #', 'Fitness', '# of Conflicts', 'Classes [Dept, Class, Room, Instructor]'])
        schedules = population.get_schedules()
        for i in range(0, len(schedules)):
            table.add_row([str(i), round(schedules[i].get_fitness(), 3), schedules[i].get_numbOfConflicts(), schedules[i]])
        print(table)
    def print_schedule_for_dept(self, schedule, dept_name):
        classes = schedule.get_classes()
        table = prettytable.PrettyTable(['Class #', 'Course (Number, Max # of Students)', 'Room (Capacity)',
                                        'Instructor (ID)', 'Meeting Time (ID)'])
        for i in range(0, len(classes)):
            if classes[i].get_dept().get_name() == dept_name:
                table.add_row([str(i + 1), classes[i].get_course().get_name() + " (" +
                               classes[i].get_course().get_number() + ", " +
                               str(classes[i].get_course().get_maxNumbOfStudents()) + ")",
                               classes[i].get_room().get_number() + " (" +
                               str(classes[i].get_room().get_seatingCapacity()) + ")",
                               classes[i].get_instructor().get_id() + " (" + classes[i].get_instructor().get_name() + ")",
                               classes[i].get_meetingTime().get_id() + " (" + classes[i].get_meetingTime().get_time() + ")"])
        print(f"\n> Schedule for Course: {dept_name}")
        print(table)
    def print_schedule_as_table(self, schedule):
        classes = schedule.get_classes()
        table = prettytable.PrettyTable(['Class #', 'Dept', 'Course (Number, Max # of Students)', 'Room (Capacity)',
                                        'Instructor (ID)', 'Meeting Time (ID)'])
        for i in range(0, len(classes)):
            table.add_row([str(i + 1), classes[i].get_dept().get_name(),
                           classes[i].get_course().get_name() + " (" + classes[i].get_course().get_number() + ", " +
                           str(classes[i].get_course().get_maxNumbOfStudents()) + ")",
                           classes[i].get_room().get_number() + " (" + str(classes[i].get_room().get_seatingCapacity()) + ")",
                           classes[i].get_instructor().get_id() + " (" + classes[i].get_instructor().get_name() + ")",
                           classes[i].get_meetingTime().get_id() + " (" + classes[i].get_meetingTime().get_time() + ")"])
        print(table)
#Main code
data = Data()
displayMgr = DisplayMgr()
displayMgr.print_available_data(data)

generationNumber = 0
print("\n> Generation # " + str(generationNumber))
population = Population(POPULATION_SIZE, data)
population.get_schedules().sort(key=lambda x: x.get_fitness(), reverse=True)
displayMgr.print_generation(population)
displayMgr.print_schedule_as_table(population.get_schedules()[0])

geneticAlgorithm = GeneticAlgorithm()
while population.get_schedules()[0].get_fitness() != 1.0:
    generationNumber += 1
    print("\n> Generation # " + str(generationNumber))
    population = geneticAlgorithm.evolve(population)
    population.get_schedules().sort(key=lambda x: x.get_fitness(), reverse=True)
    displayMgr.print_generation(population)
    displayMgr.print_schedule_as_table(population.get_schedules()[0])

# Print schedules for each department
depts = data.get_depts()
for dept in depts:
    displayMgr.print_schedule_for_dept(population.get_schedules()[0], dept.get_name())
